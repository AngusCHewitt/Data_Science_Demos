# Prediction model for renal dialysis patients 

library(tscount)
library(tidyverse)
library(forecast)
library(fpp)

# read in dataset
Dataset <- read.table("//internal.vic.gov.au/DHHS/HomeDirs6/ahew2812/Documents/Renal Model Data.csv",
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)

str(Dataset)

##-- tscount model --##

##-- 1.xreg used to add regressors (trend, covariants)

##-- 2. create future values for trend (time t + 1) for prediction model

# 10 years into the future
regressors_future <- (c(11:20))

regressors_renial <- ts(c(seq(1:10)),start = 2008, frequency = 1)

--## patient > 65 with No Diabetes
Dataset %>%
filter ( Age.Brackets == "65+" & Diabetes == "N") -> Pop_65_DN

# renial dialysis t.s. 
acf(Pop_65_DN$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_65_DN$Dialysis))

trans <- Pop_65_DN$Transplants
time <- 1:10

xcof <- cbind(trans,time)

# create t.s. for tscount model
ts_65_DN <- ts(data=Pop_65_DN$Dialysis,start = 2008, frequency = 1)

Mod_65_DN <- tsglm(ts=ts_65_DN, model = list(past_obs = 1,past_mean=4),
 link = c("log"),xreg = xcof , distr = c("poisson"))

# object names
names(Mod_65_DN)

# test models residuals are stationary
acf(residuals(Mod_65_DN))

# predict next times 10 steps
predict(Mod_65_DN,n.ahead=10,newxreg=regressors_future)

checkresiduals(Mod_65_DN,lag=5) # check residuals

?checkresiduals() 

--## patient > 65 with Diabetes

Dataset %>%
filter ( Age.Brackets == "65+" & Diabetes == "Y") -> Pop_65_DY

# renial dialysis t.s. 
acf(Pop_65_DY$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_65_DY$Dialysis))


# create t.s. for tscount model
ts_65_DY <- ts(data=Pop_65_DY$Dialysis,start = 2008, frequency = 1)

Mod_65_DY <- tsglm(ts=ts_65_DY, model = list(past_obs = 1,past_mean=3),
 link = c("log"),xreg = regressors_renial, distr = c("poisson"))

# object names
names(Mod_65_DY)

# test models residuals are stationary
acf(residuals(Mod_65_DY))

# sum model residuals
sum(abs(residuals(Mod_65_DY)))

# predict next times 10 steps
predict(Mod_65_DY,n.ahead=10,newxreg=regressors_future)

--## patient 15-64 with Diabetes

Dataset %>%
filter ( Age.Brackets == "15-64" & Diabetes == "Y") -> Pop_15.64_DY

# renial dialysis t.s. 
acf(Pop_15.64_DY$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_15.64_DY$Dialysis))


# create t.s. for tscount model
ts_15.64_DY <- ts(data=Pop_15.64_DY$Dialysis,start = 2008, frequency = 1)


Mod_15.64_DY <- tsglm(ts=ts_15.64_DY , model = list(past_obs = 1,past_mean=2),
 link = c("log"),xreg = regressors_renial, distr = c("poisson"))

# object names
names(Mod_65_DY)

# test models residuals are stationary
acf(residuals(Mod_15.64_DY))


# sum model residuals
sum(abs(residuals(Mod_15.64_DY)))


# predict next times 10 steps
predict(Mod_65_DY,n.ahead=10,newxreg=regressors_future)


--## patient 15-64 with No Diabetes

Dataset %>%
filter ( Age.Brackets == "15-64" & Diabetes == "N") -> Pop_15.64_DN

# renial dialysis t.s. 
acf(Pop_15.64_DN$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_15.64_DY$Dialysis))


# create t.s. for tscount model
ts_15.64_DN <- ts(data= Pop_15.64_DN$Dialysis,start = 2008, frequency = 1)

Mod_15.64_DN <- tsglm(ts=ts_15.64_DN , model = list(past_obs = 1,past_mean=6),
 link = c("log"),xreg = regressors_renial, distr = c("poisson"))

# models object names
names(Mod_15.64_DN)

# test models residuals are stationary
acf(residuals(Mod_15.64_DN))

# sum model residuals
sum(abs(residuals(Mod_15.64_DN)))


# predict next times 10 steps
predict(Mod_65_DN,n.ahead=10,newxreg=regressors_future)


## -- training dataset --##

Dataset %>%
filter ( Age.Brackets == "15-64" & Diabetes == "N" & 
Year < 2017 ) -> training_pop

# create t.s. for tscount model
ts_train <- ts(data=training_pop$Dialysis,start = 2008, frequency = 1)
regressors_train <- ts(c(seq(1:9)),start = 2008, frequency = 1)

train_Mod <- tsglm(ts=ts_train, model = list(past_obs = 1,past_mean=6),
 link = c("log"),xreg = regressors_train, distr = c("poisson"))

train_future = 10

# predict next times 10 steps
pred_train <- predict(train_Mod ,n.ahead=1,newxreg=train_future)


(pred_train$median[1] - ts_15.64_DN[10])/pred_train$median[1]


##-- Transplant Projections --##

Dataset %>%
filter ( Age.Brackets == "15-64" & Diabetes == "N") -> Pop_15.64_DN

# renial dialysis t.s. 
acf(Pop_15.64_DN$Live_Transplants)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_15.64_DY$Live_Transplants))

# create t.s. for tscount model
ts_15.64_DN_t <- ts(data= Pop_15.64_DN$Live_Transplants,start = 2008, frequency = 1)

plot(ts_15.64_DN_t)

Mod_15.64_DN_t <- tsglm(ts=ts_15.64_DN_t , model = list(past_obs = 1,past_mean=8),
 link = c("log"),xreg = regressors_renial, distr = c("poisson"))

# models object names
names(Mod_15.64_DN_t)

# test models residuals are stationary
acf(residuals(Mod_15.64_DN_t))

plot(1:10,residuals(Mod_15.64_DN_t),type="o") 


# sum model residuals
sum(abs(residuals(Mod_15.64_DN_t)))


# predict next times 10 steps
predict(Mod_65_DN,n.ahead=10,newxreg=regressors_future)



##-- Rob Hyndman Forecast pkgs --##

# Regression model with ARMIA ERRORS
Trans <- ts_15.64_DN_t
fit <- Arima(Trans , xreg=regressors_renial , order=c(1,1,0))
checkresiduals(fit) # check residuals

# Trian mod 
test <- window(ts_15.64_DN_t,end=2016)
mod <- forecast(fit, xreg=10)




