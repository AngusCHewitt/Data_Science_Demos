# forecast model using tscount 
## 15-64 with no Diabetes 

library(tscount)
library(tidyverse)
library(forecast)
library(fpp)

Dataset <- read.table("//internal.vic.gov.au/DHHS/HomeDirs6/ahew2812/Documents/Renal Model Data 2005-2017.csv",
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)

str(Dataset)

## patient > 65 with No Diabetes
Dataset %>%
filter ( Age_Brackets == "15-64" & Diabetes == "N") -> Pop_15_64_DN

plot(Pop_15_64_DN$Dialysis)

# renial dialysis t.s. 
acf(Pop_15_64_DN$Dialysis)
pacf(Pop_15_64_DN$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_15_64_DN$Dialysis))

# trend line
regressors_renial <- ts(c(seq(1:13)),start = 2005, frequency = 1)

# time and transplant xcof.'s
xcof <- as.data.frame(cbind(Year=regressors_renial,Trans= Pop_15_64_DN$Transplants))

# dialysis t.s.
ts_15_64_DN <- ts(data=Pop_15_64_DN$Dialysis,start = 2005, frequency = 1)

Mod_15_64_DN1 <- tsglm(ts=ts_15_64_DN, model = list(past_obs = c(3,8),past_mean=3),
 link = c("log"),xreg = regressors_renial, distr = c("poisson")) 

Mod_15_64_DN2 <- tsglm(ts=ts_15_64_DN, model = list(past_obs = c(3,8),past_mean=8),
 link = c("log"),xreg = regressors_renial, distr = c("poisson"))

Mod_15_64_DN3 <- tsglm(ts=ts_15_64_DN, model = list(past_obs = c(1,3),past_mean=9),
 link = c("log"),xreg =  xcof , distr = c("poisson"))# best mod

Mod_15_64_DN4 <- tsglm(ts=ts_15_64_DN, model = list(past_obs =c(1,3),past_mean=9),
 link = c("log"),xreg =  xcof , distr = c("poisson"))

# linear regression with ARIMA errors
 LinArima_Mod <- fit <- Arima(ts_15_64_DN, xreg=regressors_renial, order=c(3,1,8))

 LinArima_Mod2 <- fit <- Arima(ts_15_64_DN, xreg=regressors_renial, order=c(1,1,12))

 LinArima_Mod3 <- fit <- Arima(ts_15_64_DN, xreg=regressors_renial, order=c(1,3,8))

# visualise residuals
checkresiduals(Mod_15_64_DN1) 
checkresiduals(Mod_15_64_DN2)
checkresiduals(Mod_15_64_DN3)# better mod
checkresiduals(Mod_15_64_DN4)
checkresiduals(LinArima_Mod)
checkresiduals(LinArima_Mod2)

plot(LinArima_Mod)

# abs sum of residuals
sum(abs(Mod_15_64_DN1$residuals)) # = 115.9277
sum(abs(Mod_15_64_DN2$residuals)) 
sum(abs(Mod_15_64_DN3$residuals))  # = 111.5159
sum(abs(Mod_15_64_DN4$residuals))
sum(abs(LinArima_Mod$residuals))  # = 90.2  
sum(abs(LinArima_Mod2$residuals))  # = 73.989 # best mod

# diff 1 for pop 65+ with No Diabetes is stationary
acf(LinArima_Mod2$residuals)

##-- tscount: forecast model --##

##-- testing trained model

Dataset %>%
filter ( Age_Brackets == "15-64" & Diabetes == "N" & Year < 2017) -> Pop_15_64_DN_tr


# renial dialysis t.s. 
acf(Pop_15_64_DN_tr$Dialysis)
pacf(Pop_15_64_DN_tr$Dialysis)

# diff 1 for pop 65+ with No Diabetes is stationary
acf(diff(Pop_15_64_DN_tr$Dialysis))

ts_15_64_DN_tr <- ts(data=Pop_15_64_DN_tr$Dialysis,start = 2005, frequency = 1)

regressors_renial_tr <- ts(c(seq(1:12)),start = 2005, frequency = 1)
Trans_tr <- cbind(Trans=  Pop_15_64_DN_tr$Transplants)

# time and transplant xcof.'s
nxcof <- as.data.frame(cbind(Year=regressors_renial_tr,Trans=  Pop_15_64_DN_tr$Transplants))

Mod_15_64_DN1_tr <- tsglm(ts=ts_15_64_DN_tr, model = list(past_obs = c(3,8),past_mean=3),
 link = c("log"),xreg = regressors_renial_tr, distr = c("poisson")) # best mod

Mod_15_64_DN2_tr <- tsglm(ts=ts_15_64_DN_tr, model = list(past_obs = c(1,3),past_mean=9),
 link = c("log"),xreg = nxcof, distr = c("poisson")) # *--best mod--*


# visualise residuals
checkresiduals(Mod_15_64_DN1_tr ) # better mod
checkresiduals(Mod_15_64_DN2_tr)


acf(Mod_15_64_DN2_tr$residuals)

pre_mod1 <- predict(Mod_15_64_DN1_tr,n.ahead=1,newxreg=13)

# point ests and intervals
train_data <- cbind(pre_mod1$median,pre_mod1$interval)

((ts_15_64_DN[13] - pre_mod1$median[1])/ ts_15_64_DN [13])*100 # error = -2.62% # *--best mod--*

pre_mod2 <- predict(Mod_15_64_DN2_tr,n.ahead=1,newxreg=as.data.frame(cbind(time=13,trans=1633))


((ts_15_64_DN[13] - pre_mod2$median[1])/ ts_15_64_DN [13])*100 # error = -2.75% 


##-- Comparison models: Stocastic and Deterministic mods --##


trend <- seq_along(ts_15_64_DN_tr) # number of years in t.s.  
(fit1 <- auto.arima(ts_15_64_DN_tr, d=0, xreg=trend )) # fit deterministic lin mod

(fit2 <- auto.arima(ts_15_64_DN_tr, d=1)) # fit stoc. mod

# linear regression with ARIMA errors
 fit3 <- fit <- Arima(ts_15_64_DN_tr, xreg=trend, order=c(1,1,12))

# visualise residuals
checkresiduals(fit1 ) 
checkresiduals(fit2 )
checkresiduals(fit3 )

acf(fit3$residuals)


fit.beer <- tslm(ts_15_64_DN_tr ~ trend + Trans_tr)
fcast <- forecast(fit.beer,h=1,newdata=c(13,1633))
plot(fit.beer) 

((ts_15_64_DN[13] - mod3$mean[1])/ts_15_64_DN[13])*100 # error = -2.00% # better mod
((ts_15_64_DN[13] - mod4$mean[1])/ts_15_64_DN[13])*100 # error = -4.44% 
((ts_15_64_DN[13] - mod5$mean[1])/ts_15_64_DN[13])*100 # error = -4.607% 

##-- Forecast Next 10 years using best mod --##

trend <- seq_along(ts_15_64_DN) # number of years in t.s.  
(fit1 <- auto.arima(ts_15_64_DN, d=0, xreg=trend )) # fit deterministic lin mod

(fit2 <- auto.arima(ts_15_64_DN, d=1)) # fit stoc. mod

# linear regression with ARIMA errors
 fit3 <- fit <- Arima(ts_15_64_DN, xreg=trend, order=c(1,1,12))

# forecast 10 steps ahead # poisson mod residuals are much more stationary
mod3 <- forecast(fit1 ,xreg = cbind(trend = length(trend ) + 1:10))

mod4 <- forecast(fit2 , h=10)

mod5 <-  forecast(fit3 ,xreg = cbind(trend = length(trend ) + 1:10))

# plot forecast
plot(mod5)


# second best mod, choosen due to better ACF chart
Mod_15_64_DN1 <- tsglm(ts=ts_15_64_DN, model = list(past_obs = c(3,8),past_mean=3),
 link = c("log"),xreg = regressors_renial, distr = c("poisson")) # best mod

# plot model adequacy
plot(Mod_15_64_DN1)

# 13 years into the future
nxcof <- as.data.frame(cbind(Year=14:23))


# best mod 10 year dialysis prediction 
pred_mod1 <- predict(Mod_15_64_DN1,n.ahead=10,newxreg=nxcof )


acf(residuals(Mod_15_64_DN1), main = "ACF of response residuals")
autoplot(pred_mod1)

# point ests and intervals
pred_data <- cbind(pred_mod1$median,pred_mod1$interval)

# create forecast visuals
autoplot(pred_data)



