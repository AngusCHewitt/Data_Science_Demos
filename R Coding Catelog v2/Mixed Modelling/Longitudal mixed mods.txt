R Code from longitudal mixed effects

â€¢Visualizations are particularly helpful to interpret predictor effects

BodyWeight <- BodyWeight %>%
    mutate(Time = Time - 1,
           diet_f = paste("Diet", Diet, sep = " "))

body_weight <- lmer(weight ~ 1 + Time + diet_f + 
    (1 + Time  | Rat), data = BodyWeight)

bodyweight_agg <- BodyWeight %>%
   mutate(pred_values = predict(body_weight, re.form = NA)) %>%
   group_by(Time, Diet) %>%
   summarize(mean_diet_pred = mean(pred_values))

# visualize predicted values by each Diet Condition
ggplot(bodyweight_agg, aes(x = Time, y = mean_diet_pred, color = Diet)) + 
   geom_point(data = BodyWeight, aes(x = Time, y = weight)) +
   geom_line(size = 2) + 
   ylab("Body Weight") + 
   xlab("Time (in days)") +
   theme_bw(base_size = 16)


#lmer, test normality of rand effects model

## denity plot fr fixed effect cate
Body_weight <- lmer(weight ~ 1 + Time + diet_f + diet_f:Time + 
    (1 + Time  | Rat), data = BodyWeight)

BodyWeight <- BodyWeight %>%
    mutate(model_residuals = residuals(body_weight))

ggplot(BodyWeight, aes(x = model_residuals)) + 
    geom_density(aes(color = diet_f), size = 1.25) + 
    xlab("Residuals") + 
    theme_bw(base_size = 14) + 
    scale_color_brewer(palette = "Set2")

## qqplot for rand effects
body_weight <- lmer(weight ~ 1 + Time + diet_f + diet_f:Time + 
    (1 + Time  | Rat), data = BodyWeight)

random_effects <- ranef(body_weight)$Rat %>%
    mutate(id = 1:n()) %>%
    gather("variable", "value", -id)


body_weight <- lmer(weight ~ 1 + Time + diet_f + diet_f:Time + 
    (1 + Time  | Rat), data = BodyWeight)

## when accessing fixed effects need hoold rand effects constant

library(nlme)
library(dplyr)
library(lme4)

BodyWeight <- BodyWeight %>%
    mutate(Time = Time - 1,
           diet_f = paste("Diet", Diet, sep = " "))

body_weight_rs <- lmer(weight ~ 1 + Time +
    (1 + Time  | Rat), data = BodyWeight, REML = FALSE)

body_weight_diet <- lmer(weight ~ 1 + Time + diet_f + 
    (1 + Time  | Rat), data = BodyWeight, REML = FALSE)

body_weight_diet_int <- lmer(weight ~ 1 + Time + diet_f + diet_f:Time +
    (1 + Time  | Rat), data = BodyWeight, REML = FALSE)


## rand effects are used to account for the correlation between repeated measure
## below custom fun help visuals corr across obs over time (i.e. 11 time pooints) 
## to account for this corr structure you can add rand effects 

produce corr_structure <- function(object, num_timepoints, intercept_only = TRUE) {

  variance <- VarCorr(object)

  if(intercept_only) {
    random_matrix <- as.matrix(object@pp$X[1:num_timepoints, 1])

   var_cor <- random_matrix %*% variance[[1]][1] %*% t(random_matrix) +
      diag(attr(variance, "sc")^2, nrow = num_timepoints, 
          ncol = num_timepoints)
  } else {
    random_matrix <- as.matrix(object@pp$X[1:num_timepoints, ])

    var_cor <- random_matrix %*% variance[[1]][1:2, 1:2] %*% 
          t(random_matrix) + diag(attr(variance, "sc")^2, 
             nrow = num_timepoints, ncol = num_timepoints)
  }

  Matrix::cov2cor(var_cor)

}



##-- visual rand intercept and slope and implied compund struture in liner model 
# Random intercept and slope model
random_slope <- lmer(bmd ~ 1 + visit + (1 + visit | person),
                    data = calcium)

# Generate model implied correlation matrix
mod_corr <- corr_structure(random_slope, num_timepoints = 5, intercept_only = FALSE)
mod_corr

# Create visualization for correlation structure
ggcorr(data = NULL, cor_matrix = mod_corr, midpoint = NULL, 
       limits = NULL, label = TRUE, label_round = 3, label_size = 5, 
       nbreaks = 100, palette = 'PuBuGn')


