baseline_Prediction_dt$ID
baseline_Prediction_dt %>%
dplyr::filter(ID == "1126")
runApp()
baseline_Prediction_dt[1,1]
baseline_Prediction_dt$ID
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
library(tidyverse) # tidydata
library(DT) # r shiny additional funs
library(shiny) # r shiny funs
library(shinydashboard) # Rshiny dashboard funs
library(data.table) # big data
library(plotly) # interactive plot
library(shinyWidgets) # CSS and Java funs
selectInput
rubik_Mod_coef
runApp()
runApp()
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
runApp()
textInput
runApp()
rubik_Mod_coef[[11]]$Career_Positions_Meaningful_GD_Roles
shiny::runApp()
?valueBoxOutput("rubik_ODDS"))
?valueBoxOutput
runApp()
runApp()
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
View(baseline_Prediction_dt$ID == "4040")
View(baseline_Prediction_dt$ID)
runApp()
runApp()
source('~/Desktop/AFL App Dev/Weekly Data Refresh Workflows/Features building & Preds dts/Step_11_Baseline Preditions.R', echo=TRUE)
##-- predict player probs HGS using most recent obs --##
library(tidyverse) # tidy data
library(fitzRoy) # AFL functions
library(lme4) # mixed mods
library(splines) # natural splines
source(file = "/Users/angushewitt/Desktop/AFL App Dev/Weekly Data Refresh Workflows/Features building & Preds dts/Load GameDay Mixed Models.R") # load gameday models using source
load("/Users/angushewitt/Desktop/AFL Datasets/Model Data/Step_11_Pred_Model_Dataset.Rdata") ##-- each player last recorded game
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/AFL_Venue_Dims.Rdata")
baseline_Prediction_dt %>%
select(ID, First.name, Surname, Career_Position, GameDay_Role, Playing.for, fantasy_Rankings, Contested.Possessions_Rankings, HGS_Baseline_Pred, HGS_Baseline_Odds) %>%
View()
baseline_Prediction_dt %>%
select(ID, First.name, Surname, Career_Position, GameDay_Role, Playing.for, fantasy_Rankings, Contested.Possessions_Rankings, HGS_Baseline_Pred, HGS_Baseline_Odds)
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata")
baseline_Prediction_dt %>%
select(ID, First.name, Surname, Career_Position, GameDay_Role, Playing.for, fantasy_Rankings, Contested.Possessions_Rankings, HGS_Baseline_Pred, HGS_Baseline_Odds) %>%
View()
baseline_Prediction_dt %>%
filter(ID == "12242") %>%
mutate(lagged_Venue_clusters = 2L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 4L) %>%
mutate(Cnt_Favs_Game_Level = 6L) %>%
mutate(Cnt_Favs_Team_Level = 3L) %>%
mutate(Cnt_Favs_Opp_Level = 3L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Centre_Mid_Mod, newdata = scenrio_dt))
1 / exp(predict(Forward_Frwd_PT_Ruck_Mod, newdata = scenrio_dt))
View(AFL_venue_dims)
baseline_Prediction_dt %>%
filter(ID == "12775") %>%
mutate(lagged_Venue_clusters = 4L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 2L) %>%
mutate(Cnt_Favs_Game_Level = 4L) %>%
mutate(Cnt_Favs_Team_Level = 2L) %>%
mutate(Cnt_Favs_Opp_Level = 2L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Forward_Frwd_PT_Ruck_Mod, newdata = scenrio_dt))
1 / exp(predict(Half_Forward_Mod, newdata = scenrio_dt))
baseline_Prediction_dt %>%
filter(ID == "12849") %>%
mutate(lagged_Venue_clusters = 4L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 2L) %>%
mutate(Cnt_Favs_Game_Level = 4L) %>%
mutate(Cnt_Favs_Team_Level = 2L) %>%
mutate(Cnt_Favs_Opp_Level = 2L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Half_Forward_Mod, newdata = scenrio_dt))
baseline_Prediction_dt %>%
filter(ID == "12458") %>%
mutate(lagged_Venue_clusters = 4L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 2L) %>%
mutate(Cnt_Favs_Game_Level = 4L) %>%
mutate(Cnt_Favs_Team_Level = 2L) %>%
mutate(Cnt_Favs_Opp_Level = 2L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Half_Forward_Mod, newdata = scenrio_dt))
baseline_Prediction_dt %>%
filter(ID == "12548") %>%
mutate(lagged_Venue_clusters = 4L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 2L) %>%
mutate(Cnt_Favs_Game_Level = 4L) %>%
mutate(Cnt_Favs_Team_Level = 2L) %>%
mutate(Cnt_Favs_Opp_Level = 2L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Forward_Frwd_PT_Ruck_Mod, newdata = scenrio_dt))
baseline_Prediction_dt %>%
filter(ID == "12584") %>%
mutate(lagged_Venue_clusters = 4L) %>%
#mutate(Career_Positions_Meaningful_GD_Roles = "The_Rest_Car_GD_Roles") %>%
mutate(team_Cum_fantasy_Ratio_per_season_Categories_Opp = 2L) %>%
mutate(Cnt_Favs_Game_Level = 4L) %>%
mutate(Cnt_Favs_Team_Level = 2L) %>%
mutate(Cnt_Favs_Opp_Level = 2L) %>%
mutate(Cnt_Ruckman_Team_Level = ">=2") -> scenrio_dt
1 / exp(predict(Forward_Frwd_PT_Ruck_Mod, newdata = scenrio_dt))
library(tidyverse) # tidydata
library(DT) # r shiny additional funs
library(shiny) # r shiny funs
library(shinydashboard) # Rshiny dashboard funs
library(data.table) # big data
library(plotly) # interactive plot
library(shinyWidgets) # CSS and Java funs
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
rubik_Mod_coef[[11]]$Career_Positions
runApp()
runApp()
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/meaningful_var_interactions_tab.RData") # rubik cube coefs
meaningful_var_interactions_tab
meaningful_var_interactions_tab %>%
filter(GameDay_Role == "Key_Forward") -> meaningful_var_interactions_tab_key_frwd
meaningful_var_interactions_tab_key_frwd
baseline_Prediction_dt
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
baseline_Prediction_dt$Career_Positions_Meaningful_GD_Roles
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rubik_Mod_coef
runApp()
Key_Forward_Mod
runApp()
rubik_Mod_coef
Key_Forward_Mod
runApp()
rubik_Mod_coef[[5]]$GD_TOG_Categories
rubik_Mod_coef[[8]]$lagged_Venue_clusters
is(rubik_Mod_coef[[8]]$lagged_Venue_clusters)
rubik_Mod_coef[[11]]$Career_Positions)
rubik_Mod_coef[[11]]$Career_Positions
rubik_Mod_coef[[9]]$GD_Height_Categories
rubik_Mod_coef[[1]]$team_Cum_fantasy_Ratio_per_season_Categories_Opp)
rubik_Mod_coef[[1]]$team_Cum_fantasy_Ratio_per_season_Categories_Opp)
rubik_Mod_coef[[1]]$team_Cum_fantasy_Ratio_per_season_Categories_Opp
rubik_Mod_coef[[8]]$lagged_Venue_clusters
runApp()
runApp()
runApp()
runApp()
rubik_Mod_coef[[3]]$Cnt_Favs_Team_Level
is(rubik_Mod_coef[[3]]$Cnt_Favs_Team_Level)
is(rubik_Mod_coef[[4]]$Cnt_Favs_Opp_Level)
is(rubik_Mod_coef[[3]]$Cnt_Favs_Team_Level)
is(rubik_Mod_coef[[1]]$team_Cum_fantasy_Ratio_per_season_Categories_Opp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
meaningful_var_interactions_tab
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/meaningful_var_interactions_tab.RData") # rubik cube coefs
meaningful_var_interactions_tab
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
summary(Half_Forward_Mod)
rubik_Mod_coef[[9]]$GD_height_Oversized
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
rubik_Mod_coef[[9]]$GD_height_Oversized
rubik_Mod_coef
##-- Step 3 Pre 2020 Skilled position actuals coverting PBP to Gameday level stats --##
library(tidyverse) # tidy data
library(nflfastR) # nfl data extract funs
#library(cumstats) # cum stats funs
library(data.table) # big data
#library(qcc) # performance analysis funs
load('/Users/angushewitt/Desktop/NFL Datasets/pre 2021/Step_1_pbp_Seasons_2006_20.Rds') # load pbp dt
dim(pbp_Seasons_2006_20)
#[1] 719,768 420
##-- skilled plaer group pbp data act as the target vars / features for mixed mods and cluster mods
##-- rec and runs stats as well as punter / kickoff returns
pbp_Seasons_2006_20 %>%
group_by(runner_Receiver_player_ID, game_id, runner_Receiver_full_Nm, runner_Receiver_position) %>%
filter(runner_Receiver_position %in% c("TE", "WR", "RB", "FB", "QB")) %>%
nest() -> pbp_2006_2019_Skilled_pl_Stats
pbp_2006_2019_Skilled_pl_Stats
dim(pbp_2006_2019_Skilled_pl_Stats)# 79,401 obs
pbp_Seasons_2006_20 %>%
filter(play_Type_amended == "run" & runner_Receiver_position == "QB" & qb_scramble == 0) %>%
tail(10) %>%
select(desc, yards_gained)
pbp_2006_2019_Skilled_pl_Stats %>%
head(100) %>%
##-- attempted rushes and passes for skilled player
mutate(Rushes = map_dbl(data , ~sum(.x$play_Type_amended == "run"))) %>%
mutate(Targets = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- comps and pass play
mutate(Receptions = map_dbl(data , ~sum(.x$complete_pass == 1 & .x$play_Type_amended == "pass"), na.rm = TRUE)) %>%
##-- tds
mutate(rushing_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(total_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1, 1, 0), na.rm = TRUE))) %>%
##** target vars anytime td and 2tds at a game level, 1 TRUE, 0 FALSE **##
mutate(anytime_td_Binary = if_else(total_TDs > 0, 1L, 0L)) %>%
mutate(Two_tds_or_More_Binary = if_else(total_TDs > 1, 1L, 0L)) %>%
##-- yards
mutate(rush_Yards_gained = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "run", .x$yards_gained, 0), na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rush = if_else(is.nan(rush_Yards_gained / Rushes),0, round(rush_Yards_gained / Rushes,2))) %>%
mutate(rec_Yards_after_Catch = map_dbl(data , ~sum(.x$yards_after_catch, na.rm = TRUE))) -> test
mutate(rush_Yards_per_Rec = if_else(is.nan(rec_Yards_after_Catch / Receptions), 0, round(rec_Yards_after_Catch / Receptions,2))) %>%
mutate(total_Yards_gained = if_else(is.nan(rec_Yards_after_Catch + rush_Yards_gained), 0, rec_Yards_after_Catch + rush_Yards_gained)) %>%
##-- red zone stats
mutate(rushes_Goal_to_Go = map_dbl(data ,  ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(rushing_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_Targets_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass attemps by pass length
mutate(checkdown_Target = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(short_Target = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Target = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(deep_Target = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass comps by pass length
mutate(checkdown_Reception = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(short_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(deep__Reception = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
##-- rec locations (i.e. slot recs, x wr)
mutate(reception_Location_right = map_dbl(data, ~sum(.$pass_location == 'right' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_left = map_dbl(data, ~sum(.$pass_location == 'left' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_middle = map_dbl(data, ~sum(.$pass_location == 'middle' & .$complete_pass == 1, na.rm = TRUE))) %>%
##-- rush locations (i.e. between the tackles, out tackles)
mutate(rush_Location_right = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_left = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_middle = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) %>%
##-- run gaps, between guard, tackles or end
mutate(rush_Gap_end = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_tackle = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_guard = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) -> PBP_2000_2019_Skilled_pl_stats
##-- add gameday stats for runs and recs
pbp_2006_2019_Skilled_pl_Stats %>%
head(100) %>%
##-- attempted rushes and passes for skilled player
mutate(Rushes = map_dbl(data , ~sum(.x$play_Type_amended == "run"))) %>%
mutate(Targets = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- comps and pass play
mutate(Receptions = map_dbl(data , ~sum(.x$complete_pass == 1 & .x$play_Type_amended == "pass"), na.rm = TRUE)) %>%
##-- tds
mutate(rushing_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(total_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1, 1, 0), na.rm = TRUE))) %>%
##** target vars anytime td and 2tds at a game level, 1 TRUE, 0 FALSE **##
mutate(anytime_td_Binary = if_else(total_TDs > 0, 1L, 0L)) %>%
mutate(Two_tds_or_More_Binary = if_else(total_TDs > 1, 1L, 0L)) %>%
##-- yards
mutate(rush_Yards_gained = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "run", .x$yards_gained, 0), na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rush = if_else(is.nan(rush_Yards_gained / Rushes),0, round(rush_Yards_gained / Rushes,2))) %>%
mutate(rec_Yards_after_Catch = map_dbl(data , ~sum(.x$yards_after_catch, na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rec = if_else(is.nan(rec_Yards_after_Catch / Receptions), 0, round(rec_Yards_after_Catch / Receptions,2))) %>%
mutate(total_Yards_gained = if_else(is.nan(rec_Yards_after_Catch + rush_Yards_gained), 0, rec_Yards_after_Catch + rush_Yards_gained)) %>%
##-- red zone stats
mutate(rushes_Goal_to_Go = map_dbl(data ,  ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(rushing_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_Targets_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass attemps by pass length
mutate(checkdown_Target = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(short_Target = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Target = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(deep_Target = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass comps by pass length
mutate(checkdown_Reception = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(short_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(deep__Reception = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
##-- rec locations (i.e. slot recs, x wr)
mutate(reception_Location_right = map_dbl(data, ~sum(.$pass_location == 'right' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_left = map_dbl(data, ~sum(.$pass_location == 'left' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_middle = map_dbl(data, ~sum(.$pass_location == 'middle' & .$complete_pass == 1, na.rm = TRUE))) %>%
##-- rush locations (i.e. between the tackles, out tackles)
mutate(rush_Location_right = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_left = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_middle = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) %>%
##-- run gaps, between guard, tackles or end
mutate(rush_Gap_end = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_tackle = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_guard = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) -> PBP_2000_2019_Skilled_pl_stats
PBP_2000_2019_Skilled_pl_stats
glimpse(pbp_2006_2019_Skilled_pl_Stats)
glimpse(gameday_Level_2006_2020_Skilled_pl_stats)
##-- Step 3 Pre 2020 Skilled position actuals coverting PBP to Gameday level stats --##
library(tidyverse) # tidy data
library(nflfastR) # nfl data extract funs
#library(cumstats) # cum stats funs
library(data.table) # big data
#library(qcc) # performance analysis funs
load('/Users/angushewitt/Desktop/NFL Datasets/pre 2021/Step_1_pbp_Seasons_2006_20.Rds') # load pbp dt
dim(pbp_Seasons_2006_20)
#[1] 719,768 420
##-- add gameday stats for runs and recs
gameday_Level_2006_2020_Skilled_pl_stats %>%
head(100) %>%
##-- attempted rushes and passes for skilled player
mutate(Rushes = map_dbl(data , ~sum(.x$play_Type_amended == "run"))) %>%
mutate(Targets = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- comps and pass play
mutate(Receptions = map_dbl(data , ~sum(.x$complete_pass == 1 & .x$play_Type_amended == "pass"), na.rm = TRUE)) %>%
##-- tds
mutate(rushing_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(total_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1, 1, 0), na.rm = TRUE))) %>%
##** target vars anytime td and 2tds at a game level, 1 TRUE, 0 FALSE **##
mutate(anytime_td_Binary = if_else(total_TDs > 0, 1L, 0L)) %>%
mutate(Two_tds_or_More_Binary = if_else(total_TDs > 1, 1L, 0L)) %>%
##-- yards
mutate(rush_Yards_gained = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "run", .x$yards_gained, 0), na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rush = if_else(is.nan(rush_Yards_gained / Rushes),0, round(rush_Yards_gained / Rushes,2))) %>%
mutate(rec_Yards_after_Catch = map_dbl(data , ~sum(.x$yards_after_catch, na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rec = if_else(is.nan(rec_Yards_after_Catch / Receptions), 0, round(rec_Yards_after_Catch / Receptions,2))) %>%
mutate(total_Yards_gained = if_else(is.nan(rec_Yards_after_Catch + rush_Yards_gained), 0, rec_Yards_after_Catch + rush_Yards_gained)) %>%
##-- red zone stats
mutate(rushes_Goal_to_Go = map_dbl(data ,  ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(rushing_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_Targets_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass attemps by pass length
mutate(checkdown_Target = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(short_Target = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Target = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(deep_Target = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass comps by pass length
mutate(checkdown_Reception = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(short_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(deep__Reception = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
##-- rec locations (i.e. slot recs, x wr)
mutate(reception_Location_right = map_dbl(data, ~sum(.$pass_location == 'right' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_left = map_dbl(data, ~sum(.$pass_location == 'left' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_middle = map_dbl(data, ~sum(.$pass_location == 'middle' & .$complete_pass == 1, na.rm = TRUE))) %>%
##-- rush locations (i.e. between the tackles, out tackles)
mutate(rush_Location_right = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_left = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_middle = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) %>%
##-- run gaps, between guard, tackles or end
mutate(rush_Gap_end = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_tackle = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_guard = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) -> gameday_Level_2006_2020_Skilled_pl_stats
pbp_Seasons_2006_20 %>%
group_by(runner_Receiver_player_ID, game_id, runner_Receiver_full_Nm, runner_Receiver_position) %>%
filter(runner_Receiver_position %in% c("TE", "WR", "RB", "FB", "QB")) %>%
nest() -> gameday_Level_2006_2020_Skilled_pl_stats
#-- sense checks
dim(gameday_Level_2006_2020_Skilled_pl_stats)# 79,401 obs
##-- add gameday stats for runs and recs
gameday_Level_2006_2020_Skilled_pl_stats %>%
head(100) %>%
##-- attempted rushes and passes for skilled player
mutate(Rushes = map_dbl(data , ~sum(.x$play_Type_amended == "run"))) %>%
mutate(Targets = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- comps and pass play
mutate(Receptions = map_dbl(data , ~sum(.x$complete_pass == 1 & .x$play_Type_amended == "pass"), na.rm = TRUE)) %>%
##-- tds
mutate(rushing_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(total_TDs = map_dbl(data , ~sum(if_else(.x$touchdown == 1, 1, 0), na.rm = TRUE))) %>%
##** target vars anytime td and 2tds at a game level, 1 TRUE, 0 FALSE **##
mutate(anytime_td_Binary = if_else(total_TDs > 0, 1L, 0L)) %>%
mutate(Two_tds_or_More_Binary = if_else(total_TDs > 1, 1L, 0L)) %>%
##-- yards
mutate(rush_Yards_gained = map_dbl(data , ~sum(if_else(.x$play_Type_amended == "run", .x$yards_gained, 0), na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rush = if_else(is.nan(rush_Yards_gained / Rushes),0, round(rush_Yards_gained / Rushes,2))) %>%
mutate(rec_Yards_after_Catch = map_dbl(data , ~sum(.x$yards_after_catch, na.rm = TRUE))) %>%
mutate(rush_Yards_per_Rec = if_else(is.nan(rec_Yards_after_Catch / Receptions), 0, round(rec_Yards_after_Catch / Receptions,2))) %>%
mutate(total_Yards_gained = if_else(is.nan(rec_Yards_after_Catch + rush_Yards_gained), 0, rec_Yards_after_Catch + rush_Yards_gained)) %>%
##-- red zone stats
mutate(rushes_Goal_to_Go = map_dbl(data ,  ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(rushing_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "run", 1, 0), na.rm = TRUE))) %>%
mutate(reception_Targets_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(reception_TD_goal_To_go = map_dbl(data , ~sum(if_else(.x$goal_to_go == 1 & .x$touchdown == 1 & .x$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass attemps by pass length
mutate(checkdown_Target = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(short_Target = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Target = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
mutate(deep_Target = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$play_Type_amended == "pass", 1, 0), na.rm = TRUE))) %>%
##-- pass comps by pass length
mutate(checkdown_Reception = map_dbl(data, ~sum(if_else(.$air_yards <= 1 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(short_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  1 & .$air_yards <=  10 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(intermediate_Reception = map_dbl(data, ~sum(if_else(.$air_yards >  10 & .$air_yards <=  20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
mutate(deep__Reception = map_dbl(data, ~sum(if_else(.$air_yards > 20 & .$complete_pass == 1, 1, 0), na.rm = TRUE))) %>%
##-- rec locations (i.e. slot recs, x wr)
mutate(reception_Location_right = map_dbl(data, ~sum(.$pass_location == 'right' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_left = map_dbl(data, ~sum(.$pass_location == 'left' & .$complete_pass == 1, na.rm = TRUE))) %>%
mutate(reception_Location_middle = map_dbl(data, ~sum(.$pass_location == 'middle' & .$complete_pass == 1, na.rm = TRUE))) %>%
##-- rush locations (i.e. between the tackles, out tackles)
mutate(rush_Location_right = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_left = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Location_middle = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) %>%
##-- run gaps, between guard, tackles or end
mutate(rush_Gap_end = map_dbl(data, ~sum(.$run_location == 'right' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_tackle = map_dbl(data, ~sum(.$run_location == 'left' & .$rush_attempt == 1, na.rm = TRUE))) %>%
mutate(rush_Gap_guard = map_dbl(data, ~sum(.$run_location == 'middle' & .$rush_attempt == 1, na.rm = TRUE))) -> gameday_Level_2006_2020_Skilled_pl_stats
glimpse(gameday_Level_2006_2020_Skilled_pl_stats)
gameday_Level_2006_2020_Skilled_pl_stats
gameday_Level_2006_2020_Skilled_pl_stats
pbp_Seasons_2006_20
summary(gameday_Level_2006_2020_Skilled_pl_stats)
glimpse(pbp_Seasons_2006_20)
glimpse(pbp_Seasons_2006_20$yards_after_catch)
summary(gameday_Level_2006_2020_Skilled_pl_stats)
glimpse(pbp_Seasons_2006_20$kickoff_returner_player_id)
table(pbp_Seasons_2006_20$play_Type_amended)
glimpse(pbp_Seasons_2006_20)
table(pbp_Seasons_2006_20$play_Type_amended)
glimpse(pbp_Seasons_2006_20$return_yards)
glimpse(pbp_Seasons_2006_20$yards_gained)
glimpse(pbp_Seasons_2006_20$rushing_yards)
gameday_Level_2006_2020_Skilled_pl_stats
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
library(tidyverse) # tidydata
library(DT) # r shiny additional funs
library(shiny) # r shiny funs
library(shinydashboard) # Rshiny dashboard funs
library(data.table) # big data
library(plotly) # interactive plot
library(shinyWidgets) # CSS and Java funs
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
rubik_Mod_coef
runApp()
meaningful_var_interactions_tab_Half_Forward
meaningful_var_interactions_tab %>%
filter(GameDay_Role == "Half_Forward") -> meaningful_var_interactions_tab_Half_Forward
#load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
source(file = "/Users/angushewitt/Desktop/AFL App Dev/Weekly Data Refresh Workflows/Features building & Preds dts/Load GameDay Mixed Models.R") # load gameday models
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/meaningful_var_interactions_tab.RData") # rubik cube coefs
meaningful_var_interactions_tab %>%
filter(GameDay_Role == "Forward_&_Frwd/PT_Ruck") -> meaningful_var_interactions_tab_Frwd_PT_ruck
meaningful_var_interactions_tab_Frwd_PT_ruck
meaningful_var_interactions_tab %>%
filter(GameDay_Role == "Half_Forward") -> meaningful_var_interactions_tab_Half_Forward
meaningful_var_interactions_tab_Half_Forward
runApp()
Half_Forward_Mod
ranef(Half_Forward_Mod)
shiny::runApp()
rubik_Mod_coef
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
rubik_Mod_coef
Mid_Frwd_Hybrid_Mod
summary(Mid_Frwd_Hybrid_Mod)
coefficients(Mid_Frwd_Hybrid_Mod)
ranef(Mid_Frwd_Hybrid_Mod)
tidy(Mid_Frwd_Hybrid_Mod)
broom::tidy(Mid_Frwd_Hybrid_Mod)
broom.mixed::tidy(Mid_Frwd_Hybrid_Mod)
View(broom.mixed::tidy(Mid_Frwd_Hybrid_Mod))
meaningful_var_interactions_tab
load("/Users/angushewitt/Desktop/AFL App Dev/Apps/Data/baseline_Prediction_dt.Rdata") #baselimeprd dt - AFL stats last rec game
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/meaningful_var_interactions_tab.RData") # rubik cube coefs
meaningful_var_interactions_tab
Mid_Frwd_Hybrid_Mod
meaningful_var_interactions_tab %>%
filter(GameDay_Role == "Mid/Frwd_Hybrid") -> meaningful_var_interactions_tab_Mid_Frwd_Hybrid
meaningful_var_interactions_tab_Mid_Frwd_Hybrid
runApp()
View(broom.mixed::tidy(Ruckman_Mod))
rubik_Mod_coef
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Mod_coef.Rdata") # rubik cube coefs
rubik_Mod_coef
View(broom.mixed::tidy(Ruckman_Mod))
runApp()
shiny::runApp()
shiny::runApp()
