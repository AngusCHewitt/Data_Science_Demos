if (input$Cnt_HGS_Favs_Team != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Key_Forward_dt
}))
}
shinyApp(ui, server)
runApp('Dynamic switching rubix Cube.R')
runApp('DT rubix Cube.R')
shiny::runApp('~/Desktop/AFL test case/AFL Apps')
library(shiny); runApp('DT rubix Cube.R')
# Load the ggplot2 package which provides
# the 'mpg' dataset.
library(tidyverse)
library(shiny)
library(data.table)
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Key_Forward_dt.Rdata")
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Forward_Frwd_PT_Ruck_dt.Rdata")
ui <- fluidPage(
tabsetPanel(tabPanel("tab1",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Key_Forward_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Key_Forward_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Key_Forward_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table")
),
tabPanel("tab2",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table2")
)
)
)
server <- function(input, output, session) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Key_Forward_dt %>%
select(ID, HGS_Probability, HGS_Odds) -> Key_Forward_dt
}))
# Filter data based on selections
output$table2 <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Forward_Frwd_PT_Ruck_dt %>%
select(ID, HGS_Probability, HGS_Odds) -> Forward_Frwd_PT_Ruck_dt
}))
}
shinyApp(ui, server)
rm(list = ls())  # caution: delete all objects in .GlobalEnv
gc()  # free system memory
##-- create table of all variable coefficient levels
library(tidyverse) # tidy Data
library(data.table) # Big Data
library(fitzRoy) # AFL functions
library(lme4) # mixed mods
load("/Users/angushewitt/Desktop/AFL Datasets/Model Data/Step_11_Pred_Model_Dataset.Rdata") ##-- each player last recorded game
load("/Users/angushewitt/Desktop/AFL Datasets/Misc/rubik_Cube_dt.Rdata") ##-- rubix cube var coefs
source(file = "/Users/angushewitt/Desktop/AFL test case/Weekly Data Refresh Workflows/Model Features & Preds/Load GameDay Mixed Models.R") # load gameday models using source
##-- last ganme was from 2018
Pred_Model_Dataset %>%
as.data.table() %>%
filter(Season >= 2019) -> Pred_Model_Dataset
max(Pred_Model_Dataset$Date)
# "2020-10-24"
dim(Pred_Model_Dataset)
# 769 players /  214 cols
dim(rubik_Cube_dt)
# 11,801 9
##--  coerce to data.table, select only model vars and player ID's, add var join = 1
Pred_Model_Dataset %>%
select(ID, lagged_no_Games_pl_Categories, TOG_Categories, first_Game_season_Factor, yr_int, yr_intervals_2020,
Goal_scoring_Fatasy_scores_centre , Goal_scoring_Fatasy_scores_pos_sd  , Goal_scoring_Fatasy_scores_neg_sd ,
Contested.Possessions_minus_CM_centre , Contested.Possessions_minus_CM_pos_sd  , Contested.Possessions_minus_CM_neg_sd ,
Mid_stats_centre , Mid_stats_pos_sd  , Mid_stats_neg_sd ,
Hit.Outs_centre , Hit.Outs_pos_sd  , Hit.Outs_neg_sd ) %>%
mutate(Obs = 1) -> Pred_Model_Dataset
##-- right join all rubix cube variations to Pred dt, each ID has 11,801 mod combinations
rubik_Cube_dt %>%
as.data.table() %>%
mutate(Obs = 1) %>%
right_join(Pred_Model_Dataset, by = "Obs") %>%
select(-Obs) -> rubik_Cube_dt
##-- select order of dataset so its human frendly
rubik_Cube_dt %>%
select(ID, lagged_no_Games_pl_Categories, TOG_Categories, first_Game_season_Factor, yr_int, yr_intervals_2020,
GameDay_Role, Career_Positions_Meaningful_GD_Roles, GD_Height_Categories, Cnt_Favs_Game_Level, Cnt_Elite_Great_Key_Defs_Opp_Level,
Cnt_Favs_Team_Level, Cnt_Favs_Opp_Level, Cnt_Ruckman_Team_Level, Cnt_Elite_Great_Half_Backs_Opp_Level,
Goal_scoring_Fatasy_scores_centre , Goal_scoring_Fatasy_scores_pos_sd  , Goal_scoring_Fatasy_scores_neg_sd ,
Contested.Possessions_minus_CM_centre , Contested.Possessions_minus_CM_pos_sd  , Contested.Possessions_minus_CM_neg_sd ,
Mid_stats_centre , Mid_stats_pos_sd  , Mid_stats_neg_sd ,
Hit.Outs_centre , Hit.Outs_pos_sd  , Hit.Outs_neg_sd )  -> rubik_Cube_dt
##-- Target: Key_Forward --+++
rubik_Cube_dt %>%
filter(GameDay_Role == "Key_Forward") -> Key_Forward_dt
##-- add prediction and odds HGS in next game
##-- ifelse apply model for preceding games, first game mod if false
##-- quality check ifelse method and preds preceding and first game models applied to right obs
Key_Forward_dt %>%
ungroup() %>%
mutate(HGS_Probability = if_else(first_Game_season_Factor == "Preceding_rounds", predict(Key_Forward_Mod, newdata = Key_Forward_dt, type =  "response"),
predict(Key_Forward_Mod_1st_Game_season, newdata = Key_Forward_dt, type =  "response"))) %>%
mutate(HGS_Probability = round(HGS_Probability,4)) %>%
mutate(HGS_Odds = if_else(1/HGS_Probability < 10, round(1/HGS_Probability, 2), round(1/HGS_Probability))) %>%
mutate(HGS_Probability = HGS_Probability * 100) %>%
select(ID, Career_Positions_Meaningful_GD_Roles, GD_Height_Categories, Cnt_Favs_Team_Level, Cnt_Favs_Opp_Level, Cnt_Elite_Great_Key_Defs_Opp_Level,
HGS_Probability, HGS_Odds) -> Key_Forward_dt
save(Key_Forward_dt, file =  "/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Key_Forward_dt.Rdata")
rm(list = ls())  # caution: delete all objects in .GlobalEnv
gc()  # free system memory
# Load the ggplot2 package which provides
# the 'mpg' dataset.
library(tidyverse)
library(shiny)
library(data.table)
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Key_Forward_dt.Rdata")
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Forward_Frwd_PT_Ruck_dt.Rdata")
ui <- fluidPage(
tabsetPanel(tabPanel("tab1",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Key_Forward_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Key_Forward_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Key_Forward_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table")
),
tabPanel("tab2",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table2")
)
)
)
server <- function(input, output, session) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Key_Forward_dt %>%
select(ID, HGS_Probability, HGS_Odds) -> Key_Forward_dt
}))
# Filter data based on selections
output$table2 <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Forward_Frwd_PT_Ruck_dt %>%
select(ID, HGS_Probability, HGS_Odds) -> Forward_Frwd_PT_Ruck_dt
}))
}
shinyApp(ui, server)
# Load the ggplot2 package which provides
# the 'mpg' dataset.
library(tidyverse)
library(shiny)
library(data.table)
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Key_Forward_dt.Rdata")
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Mixed Mods/Forward_Frwd_PT_Ruck_dt.Rdata")
ui <- fluidPage(
tabsetPanel(tabPanel("tab1",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Key_Forward_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Key_Forward_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Key_Forward_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table")
),
tabPanel("tab2",
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("player_ID",
"player_ID:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$ID))))),
column(4,
selectInput("Career_Pos",
"Career_Positions_Meaningful_GD_Roles:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles))))),
column(4,
selectInput("GameDay_Height",
"GD_Height_Categories:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$GD_Height_Categories))))),
column(4,
selectInput("Cnt_HGS_Favs_Team",
"Cnt_HGS_Favs_Team:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level))))),
column(4,
selectInput("Cnt_HGS_Favs_Opposition",
"Cnt_HGS_Favs_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level))))),
column(4,
selectInput("Key_Def_Opposition",
"Key_Def_Opposition:",
c("All",
unique(as.character(Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level)))))
),
# Create a new row for the table.
DT::dataTableOutput("table2")
)
)
)
server <- function(input, output, session) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Key_Forward_dt <- Key_Forward_dt[Key_Forward_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Key_Forward_dt %>%
select(ID, HGS_Probability, HGS_Odds) %>%
rename("HGS_Probability (%)" = HGS_Probability,
"HGS_Odds (n / 1)" = HGS_Odds) -> Key_Forward_dt
}))
# Filter data based on selections
output$table2 <- DT::renderDataTable(DT::datatable(
options = list(searching = FALSE, pageLength = 10, autoWidth = TRUE),
{
if (input$player_ID != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$ID == input$player_ID,]
}
if (input$Career_Pos != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Career_Positions_Meaningful_GD_Roles == input$Career_Pos,]
}
if (input$GameDay_Height != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$GD_Height_Categories == input$GameDay_Height,]
}
if (input$Cnt_HGS_Favs_Team != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Team_Level == input$Cnt_HGS_Favs_Team,]
}
if (input$Cnt_HGS_Favs_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Favs_Opp_Level == input$Cnt_HGS_Favs_Opposition,]
}
if (input$Key_Def_Opposition != "All") {
Forward_Frwd_PT_Ruck_dt <- Forward_Frwd_PT_Ruck_dt[Forward_Frwd_PT_Ruck_dt$Cnt_Elite_Great_Key_Defs_Opp_Level == input$Key_Def_Opposition,]
}
Forward_Frwd_PT_Ruck_dt %>%
select(ID, HGS_Probability, HGS_Odds) -> Forward_Frwd_PT_Ruck_dt
}))
}
shinyApp(ui, server)
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
runApp('~/Desktop/AFL test case/AFL Apps')
load("~/Desktop/AFL test case/AFL Apps/Data/Team_Opp_model_Info.Rdata")
glimpse(Team_Opp_model_Info)
load("~Data/Mixed Mods/Key_Forward_dt.Rdata")
load("~/Data/Mixed Mods/Key_Forward_dt.Rdata")
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Team_Opp_model_Info.Rdata")
runApp('~/Desktop/AFL test case/AFL Apps')
load("/Users/angushewitt/Desktop/AFL test case/AFL Apps/Data/Car_GD_height_Model_perf_Info.Rdata")
glimpse(Car_GD_height_Model_perf_Info)
runApp('~/Desktop/AFL test case/AFL Apps')
