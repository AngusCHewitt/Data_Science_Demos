# PCA with FactoMineR

# Run a PCA for the 10 non-binary numeric variables of cars.

pca_output_ten_v <- PCA(cars[,9:19], ncp = 4, graph = FALSE)



# Get the summary of the first 100 cars.

summary(pca_output_ten_v, nbelements = 100)



# Get the variance of the first 3 new dimensions.

pca_output_ten_v$eig[,2][1:3]


# Get the cumulative variance.

pca_output_ten_v$eig[,3][1:3]

##-- expore PCA correlation and subset vars included into the mod

# Run a PCA with active and supplementary variables

pca_output_all <- PCA(cars, quanti.sup = 1:8, quali.sup = 20:21, graph = FALSE)



# Get the most correlated variables

dimdesc(pca_output_all, axes = 1:2)


# Run a PCA on the first 100 car categories

pca_output_hundred <- PCA(cars, quanti.sup = 1:8, quali.sup = 20:21, ind.sup=101:nrow(cars), graph = FALSE)

# Trace variable contributions in pca_output_hundred

pca_output_hundred$var$contrib


Comments: You have used the most important arguments of the main PCA() function, 
namely quali.sup, quanti.sup and ind.sup. Moreover, 
you have been browsing through the available atrributes of the resulting PCA model object!

# Run a PCA using the 10 non-binary numeric variables.

cars_pca <- dudi.pca(cars[,9:19], scannf = F, nf = 4)



# Explore the summary of cars_pca.

summary(cars_pca)



# Explore the summary of pca_output_ten_v.

summary(pca_output_ten_v)

Comments: Now, you know how to conduct PCA with the dudi.pca() 
function of ade4, another well-known package for conducting dimensionality reduction.

##-- visualising PCA
an important index included in your PCA models is the squared cosine, abbreviated in FactoMineR and factoextra as cos2. 
This shows how accurate the representation of your variables or individuals on the PC plane is.

# Create a factor map for the variables.

fviz_pca_var(pca_output_all, select.var  = list(cos2 = 0.7), repel = TRUE)

# Modify the code to create a factor map for the individuals.

fviz_pca_ind(pca_output_all, select.ind = list(cos2 = 0.7), repel = TRUE)

# Create a barplot for the variables with the highest cos2 in the 1st PC.

fviz_cos2(pca_output_all, choice = "var", axes = 1, top = 10)

# Create a barplot for the variables with the highest cos2 in the 2nd PC.

fviz_cos2(pca_output_all, choice = "var", axes = 2, top = 10)

Comments: Great job! Take a minute and think: What do the cos2 tell you about the new representation 
provided by your models? Can you tell whether they are good enough in quality?

Comments: prepare a number of plots to help you get a better feeling of the variables' contributions on the extracted principal components. It is important 
to keep in mind that the contributions of the variables essentially signify their importance for the construction of a given principal component.


# Create a factor map for the top 5 variables with the highest contributions.

fviz_pca_var(pca_output_all, select.var = list(contrib = 5), repel = TRUE)



# Create a factor map for the top 5 individuals with the highest contributions.

fviz_pca_ind(pca_output_all, select.ind = list(contrib = 5), repel = TRUE)



# Create a barplot for the variables with the highest contributions to the 1st PC.

fviz_contrib(pca_output_all,  choice="var", axes = 1, top = 5)



# Create a barplot for the variables with the highest contributions to the 2nd PC.

fviz_contrib(pca_output_all,  choice="var", axes = 2, top = 5)

Comments: you know what it means that a variable is important in the extraction of the principal components! 
You could compare the two different graphs. Which variables are in both dimensions very important and which ones are only in one of them?

# Create a biplot with no labels for all individuals with the geom argument.

fviz_pca_biplot(pca_output_all)

# Create a biplot with no labels for all individuals
fviz_pca_biplot(pca_output_all)

# Create ellipsoids with habillage for wheeltype

fviz_pca_ind(pca_output_all, habillage = cars$wheeltype, addEllipses = TRUE)

# Create the biplot with ellipsoids

fviz_pca_biplot(pca_output_all, habillage = cars$wheeltype, addEllipses = TRUE, alpha.var = "cos2")

