library(lubridate) # tidy dates
library(flexmix) # mixture mods
library(factoextra) # clustering visualization
library(cluster) # cluster stats
library(clipr) # copy objs
load("~/Desktop/AFL App Dev/AFL Datasets/Historical data Pre current Season/Step_2_lagged_AFL_tabs_TS_stats.Rdata") # lagged TS and GD data
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster fund
source("~/Desktop/R functions/loop seasonal mixture models.R") #  career seasonal cluster fun
source("~/Desktop/R functions/loop mixture model.R") #  career mixture mod fun  fun
source("~/Desktop/R functions/loop single mixture model.R") #  career mixture mod fun  fun
dim(AFL_gameday_TS_stats_Pre_current_Season_Lagged)
# 145596     96
# filter out first gamers, label career and GD role as first games so we can still add obs to GD skilled models
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
filter(is.na(Goals)) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged_first_Gamers
##-- 1544 obs
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
filter(!(is.na(Goals))) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged
dim(AFL_gameday_TS_stats_Pre_current_Season_Lagged)
# 144052     96
##--------------------------- TS CLusters ---------------------##
##-- convert var to integer values
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
gather("Var", "Value", -Round, -Date, -ID, -Venue, -Season, -Away.team, -Home.team, -Playing.for, -DOB, -First.name, -lagged_Date, -Surname, -Jumper.No., -Substitute, -Brownlow.Votes) %>%
mutate(Value = as.integer(round(Value))) %>% # round of values and covert to inetger values
spread(Var, Value) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged
#--cluster vars
##--add var with cnt distrn help desc player psistion type
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
select(TS_Running_Med_Clearances, TS_Running_Range_Clearances,
TS_Running_Med_Hit.Outs, TS_Running_Range_Hit.Outs,
TS_Running_Med_Marks.Inside.50, TS_Running_Range_Marks.Inside.50,
TS_Running_Med_Rebounds, TS_Running_Range_Rebounds,
TS_Running_Med_One.Percenters, TS_Running_Range_One.Percenters,
TS_Running_Med_SOG, TS_Running_Range_SOG,
TS_Running_Med_Inside.50s, TS_Running_Range_Inside.50s) %>%
data.frame() %>%
as.matrix() -> Car_var_Matrix
is(Car_var_Matrix[1])
season_vec <- as.character(AFL_gameday_TS_stats_Pre_current_Season_Lagged$Season)
data <-  car_Pos_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 4:5, 2)
data
##-- cluster player into career positions us lagged TS vars
library(tidyverse) # tidy dt
library(data.table) # big data
library(lubridate) # tidy dates
library(flexmix) # mixture mods
library(factoextra) # clustering visualization
library(cluster) # cluster stats
library(clipr) # copy objs
load("~/Desktop/AFL App Dev/AFL Datasets/Historical data Pre current Season/Step_2_lagged_AFL_tabs_TS_stats.Rdata") # lagged TS and GD data
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster fund
source("~/Desktop/R functions/loop seasonal mixture models.R") #  career seasonal cluster fun
source("~/Desktop/R functions/loop mixture model.R") #  career mixture mod fun  fun
source("~/Desktop/R functions/loop single mixture model.R") #  career mixture mod fun  fun
dim(AFL_gameday_TS_stats_Pre_current_Season_Lagged)
# 145596     96
# filter out first gamers, label career and GD role as first games so we can still add obs to GD skilled models
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
filter(is.na(Goals)) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged_first_Gamers
##-- 1544 obs
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
filter(!(is.na(Goals))) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged
dim(AFL_gameday_TS_stats_Pre_current_Season_Lagged)
# 144052     96
##--------------------------- TS CLusters ---------------------##
##-- convert var to integer values
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
gather("Var", "Value", -Round, -Date, -ID, -Venue, -Season, -Away.team, -Home.team, -Playing.for, -DOB, -First.name, -lagged_Date, -Surname, -Jumper.No., -Substitute, -Brownlow.Votes) %>%
mutate(Value = as.integer(round(Value))) %>% # round of values and covert to inetger values
spread(Var, Value) -> AFL_gameday_TS_stats_Pre_current_Season_Lagged
#--cluster vars
##--add var with cnt distrn help desc player psistion type
AFL_gameday_TS_stats_Pre_current_Season_Lagged %>%
select(TS_Running_Med_Clearances, TS_Running_Range_Clearances,
TS_Running_Med_Hit.Outs, TS_Running_Range_Hit.Outs,
TS_Running_Med_Marks.Inside.50, TS_Running_Range_Marks.Inside.50,
TS_Running_Med_Rebounds, TS_Running_Range_Rebounds,
TS_Running_Med_One.Percenters, TS_Running_Range_One.Percenters,
TS_Running_Med_SOG, TS_Running_Range_SOG,
TS_Running_Med_Inside.50s, TS_Running_Range_Inside.50s) %>%
data.frame() %>%
as.matrix() -> Car_var_Matrix
is(Car_var_Matrix[1])
season_vec <- as.character(AFL_gameday_TS_stats_Pre_current_Season_Lagged$Season)
##-- loop through career position * 5 store ICL?BIC screen dump with model specs
data <-  car_Pos_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 4:5, 2)
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 4:5, 2)
season_vec
mixture_Mod_seasonl_Loop
401:405
season_vec
##--- Loop through multiple mixtur models and store totao WSS and BSS in a list
#Loop car seasonal fun
mixture_Mod_seasonl_Loop <- function(Matrix_dt,  season_vec, rand_no, tol, k, nreps) {
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster stats fund
##-- matix icnludes all cluster vars intested for the singular mod
##-- allowed multiple levels of k
##-- radnom states seq of 5 numbers
##  seaoson vector , assigned vector to "season vec"
##-- use if ladder to choose the optimal model, too time consuming to comapred all WSS/BSS
##-- when optima; var a decided upon rely more of BIC to find optimal mod
##--check for model stabliity over time
##-- pois ixture mod, 1 of 5
set.seed(rand_no[1])
mvpois_mix_model_optimal_1 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[2])
mvpois_mix_model_optimal_2 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[3])
mvpois_mix_model_optimal_3 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[4])
mvpois_mix_model_optimal_4 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[5])
mvpois_mix_model_optimal_5 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
## find the min BIC amongst the 5 mixture mod iterations
min_BIC <- min(BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3,
mvpois_mix_model_optimal_4, mvpois_mix_model_optimal_5)$BIC)
##-- if else ladder to determine optimal BIC model, first ods
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
} else if (BIC(mvpois_mix_model_optimal_4) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_4
} else {mvpois_mix_model_optimal_5}
##--  new CV medium plus range to determine how much within summer squares variation  within each cluster
##-- WSS
matrix %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
WSS_clust_Var_level_Fun() -> optimal_Mod_WSS_cluster_Level
##-- BSS
matrix %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
BSS_clust_Var_fun() -> optimal_Mod_BSS_cluster_Level
##-- distn of cluster of seasons
matrix %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
mutate(Season = as.numeric(season_vec)) %>%
group_by(clustering, Season) %>%
summarise(cnt = n()) %>%
spread(Season, cnt) -> optimal_Mod_seasonal_Distrn
##-- model stats
model_stats <- data.frame(BIC = BIC(optimal_Mod))
##-- remove moels
#rm(optimal_Mod, ICL_optimal_Mod)
##-- store mixture mod with cluster stats
list(BIC_WSS = optimal_Mod_WSS_cluster_Level,
BIC_BSS = optimal_Mod_BSS_cluster_Level,
BIC_seasonal= optimal_Mod_seasonal_Distrn,
BIC_ICL_stats = model_stats)
}
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 4:5, 2)
4:5
##--- Loop through multiple mixtur models and store totao WSS and BSS in a list
#Loop car seasonal fun
mixture_Mod_seasonl_Loop <- function(Matrix_dt_dt,  season_vec, rand_no, tol, k, nreps) {
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster stats fund
##-- matix icnludes all cluster vars intested for the singular mod
##-- allowed multiple levels of k
##-- radnom states seq of 5 numbers
##  seaoson vector , assigned vector to "season vec"
##-- use if ladder to choose the optimal model, too time consuming to comapred all WSS/BSS
##-- when optima; var a decided upon rely more of BIC to find optimal mod
##--check for model stabliity over time
##-- pois ixture mod, 1 of 5
set.seed(rand_no[1])
mvpois_mix_model_optimal_1 <- stepFlexmix(Matrix_dt_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[2])
mvpois_mix_model_optimal_2 <- stepFlexmix(Matrix_dt_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[3])
mvpois_mix_model_optimal_3 <- stepFlexmix(Matrix_dt_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[4])
mvpois_mix_model_optimal_4 <- stepFlexmix(Matrix_dt_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[5])
mvpois_mix_model_optimal_5 <- stepFlexmix(Matrix_dt_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
## find the min BIC amongst the 5 mixture mod iterations
min_BIC <- min(BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3,
mvpois_mix_model_optimal_4, mvpois_mix_model_optimal_5)$BIC)
##-- if else ladder to determine optimal BIC model, first ods
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
} else if (BIC(mvpois_mix_model_optimal_4) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_4
} else {mvpois_mix_model_optimal_5}
##--  new CV medium plus range to determine how much within summer squares variation  within each cluster
##-- WSS
Matrix_dt_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
WSS_clust_Var_level_Fun() -> optimal_Mod_WSS_cluster_Level
##-- BSS
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
BSS_clust_Var_fun() -> optimal_Mod_BSS_cluster_Level
##-- distn of cluster of seasons
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
mutate(Season = as.numeric(season_vec)) %>%
group_by(clustering, Season) %>%
summarise(cnt = n()) %>%
spread(Season, cnt) -> optimal_Mod_seasonal_Distrn
##-- model stats
model_stats <- data.frame(BIC = BIC(optimal_Mod))
##-- remove moels
#rm(optimal_Mod, ICL_optimal_Mod)
##-- store mixture mod with cluster stats
list(BIC_WSS = optimal_Mod_WSS_cluster_Level,
BIC_BSS = optimal_Mod_BSS_cluster_Level,
BIC_seasonal= optimal_Mod_seasonal_Distrn,
BIC_ICL_stats = model_stats)
}
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 4:5, 2)
##--- Loop through multiple mixtur models and store totao WSS and BSS in a list
#Loop car seasonal fun
mixture_Mod_seasonl_Loop <- function(Matrix_dt,  season_vec, rand_no, tol, k, nreps) {
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster stats fund
##-- matix icnludes all cluster vars intested for the singular mod
##-- allowed multiple levels of k
##-- radnom states seq of 5 numbers
##  seaoson vector , assigned vector to "season vec"
##-- use if ladder to choose the optimal model, too time consuming to comapred all WSS/BSS
##-- when optima; var a decided upon rely more of BIC to find optimal mod
##--check for model stabliity over time
##-- pois ixture mod, 1 of 5
set.seed(rand_no[1])
mvpois_mix_model_optimal_1 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[2])
mvpois_mix_model_optimal_2 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[3])
mvpois_mix_model_optimal_3 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[4])
mvpois_mix_model_optimal_4 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[5])
mvpois_mix_model_optimal_5 <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
## find the min BIC amongst the 5 mixture mod iterations
min_BIC <- min(BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3,
mvpois_mix_model_optimal_4, mvpois_mix_model_optimal_5)$BIC)
##-- if else ladder to determine optimal BIC model, first ods
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
} else if (BIC(mvpois_mix_model_optimal_4) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_4
} else {mvpois_mix_model_optimal_5}
##--  new CV medium plus range to determine how much within summer squares variation  within each cluster
##-- WSS
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
WSS_clust_Var_level_Fun() -> optimal_Mod_WSS_cluster_Level
##-- BSS
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
BSS_clust_Var_fun() -> optimal_Mod_BSS_cluster_Level
##-- distn of cluster of seasons
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
mutate(Season = as.numeric(season_vec)) %>%
group_by(clustering, Season) %>%
summarise(cnt = n()) %>%
spread(Season, cnt) -> optimal_Mod_seasonal_Distrn
##-- model stats
model_stats <- data.frame(BIC = BIC(optimal_Mod))
##-- remove moels
#rm(optimal_Mod, ICL_optimal_Mod)
##-- store mixture mod with cluster stats
list(BIC_WSS = optimal_Mod_WSS_cluster_Level,
BIC_BSS = optimal_Mod_BSS_cluster_Level,
BIC_seasonal= optimal_Mod_seasonal_Distrn,
BIC_ICL_stats = model_stats)
}
ecs
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 2:3, 2)
mixture_Mod_seasonl_Loop
clusters
rand_no <- 1:3
set.seed(rand_no[1])
mvpois_mix_model_optimal_1 <- stepFlexmix(Car_var_Matrix ~ 1 | season_vec,
k = 2:3,
nrep = 2,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = 1e-2, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[2])
mvpois_mix_model_optimal_2 <- stepFlexmix(Car_var_Matrix ~ 1 | season_vec,
k = 2:3,
nrep = 2,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = 1e-2, classify = "w")) # tolerance plays big factor in model run time
set.seed(rand_no[3])
mvpois_mix_model_optimal_3 <- stepFlexmix(Car_var_Matrix ~ 1 | season_vec,
k = 2:3,
nrep = 2,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = 1e-2, classify = "w")) # tolerance plays big factor in model run time
min_BIC <- min(BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3)$BIC)
min_BIC
mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3
BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3)
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
} else if (BIC(mvpois_mix_model_optimal_4) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_4
} else {mvpois_mix_model_optimal_5}
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
}
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else  {
optimal_Mod <- mvpois_mix_model_optimal_3
}
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else {
optimal_Mod <- mvpois_mix_model_optimal_3
}
rm(optimal_Mod)
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else {
optimal_Mod <- mvpois_mix_model_optimal_3
}
min_BIC
BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3)
mvpois_mix_model_optimal_2
##--- Loop through multiple mixtur models and store totao WSS and BSS in a list
#Loop car seasonal fun
mixture_Mod_seasonl_Loop <- function(Matrix_dt,  season_vec, rand_no, tol, k, nreps) {
source("~/Desktop/R functions/cluster stats & vis funs.R") #  cluster stats fund
##-- matix icnludes all cluster vars intested for the singular mod
##-- allowed multiple levels of k
##-- radnom states seq of 5 numbers
##  seaoson vector , assigned vector to "season vec"
##-- use if ladder to choose the optimal model, too time consuming to comapred all WSS/BSS
##-- when optima; var a decided upon rely more of BIC to find optimal mod
##--check for model stabliity over time
##00 get model best BIC models
##-- pois ixture mod, 1 of 5
set.seed(rand_no[1])
mvpois_mix_model_optimal <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
mvpois_mix_model_optimal_1 <- getModel(mvpois_mix_model_optimal, which = "BIC")
set.seed(rand_no[2])
mvpois_mix_model_optimal <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
mvpois_mix_model_optimal_2 <- getModel(mvpois_mix_model_optimal, which = "BIC")
set.seed(rand_no[3])
mvpois_mix_model_optimal <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
mvpois_mix_model_optimal_3 <- getModel(mvpois_mix_model_optimal, which = "BIC")
set.seed(rand_no[4])
mvpois_mix_model_optimal <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run ti
mvpois_mix_model_optimal_4 <- getModel(mvpois_mix_model_optimal, which = "BIC")
set.seed(rand_no[5])
mvpois_mix_model_optimal <- stepFlexmix(Matrix_dt ~ 1 | season_vec,
k = k,
nrep = nreps,
model = FLXMCmvpois(),
control = list(iter.max = 1000, tolerance = tol, classify = "w")) # tolerance plays big factor in model run time
mvpois_mix_model_optimal_5 <- getModel(mvpois_mix_model_optimal, which = "BIC")
## find the min BIC amongst the 5 mixture mod iterations
min_BIC <- min(BIC(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3,
mvpois_mix_model_optimal_4, mvpois_mix_model_optimal_5)$BIC)
##-- if else ladder to determine optimal BIC model, first ods
if (BIC(mvpois_mix_model_optimal_1) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_1
} else if (BIC(mvpois_mix_model_optimal_2) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_2
} else if (BIC(mvpois_mix_model_optimal_3) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_3
} else if (BIC(mvpois_mix_model_optimal_4) == min_BIC) {
optimal_Mod <- mvpois_mix_model_optimal_4
} else {mvpois_mix_model_optimal_5}
## remvoe redundant vars
rm(mvpois_mix_model_optimal_1, mvpois_mix_model_optimal_2, mvpois_mix_model_optimal_3, mvpois_mix_model_optimal_4,
mvpois_mix_model_optimal_5, mvpois_mix_model_optimal)
##--  new CV medium plus range to determine how much within summer squares variation  within each cluster
##-- WSS
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
WSS_clust_Var_level_Fun() -> optimal_Mod_WSS_cluster_Level
##-- BSS
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
BSS_clust_Var_fun() -> optimal_Mod_BSS_cluster_Level
##-- distn of cluster of seasons
Matrix_dt %>%
data.frame() %>%
mutate(clustering = clusters(optimal_Mod)) %>%
mutate(Season = as.numeric(season_vec)) %>%
group_by(clustering, Season) %>%
summarise(cnt = n()) %>%
spread(Season, cnt) -> optimal_Mod_seasonal_Distrn
##-- model stats
model_stats <- data.frame(BIC = BIC(optimal_Mod))
##-- remove moels
#rm(optimal_Mod, ICL_optimal_Mod)
##-- store mixture mod with cluster stats
list(BIC_WSS = optimal_Mod_WSS_cluster_Level,
BIC_BSS = optimal_Mod_BSS_cluster_Level,
BIC_seasonal= optimal_Mod_seasonal_Distrn,
BIC_ICL_stats = model_stats)
}
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-2, 2:3, 2)
data
data <-  mixture_Mod_seasonl_Loop(Car_var_Matrix, season_vec, 401:405, 1e-10, 4:8, 10)
data
