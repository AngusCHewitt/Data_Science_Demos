# chi sq distrn
x <- rchisq(100,3)
plot(x)
# tukey fun
T_Tuk_Fun <- function(df) {
T_tuk = transformTukey(df,
plotit=F,quiet = T,returnLambda = T)
df^T_tuk}
plot(T_Tuk_Fun(x))
T_Tuk_Fun
plot(T_Tuk_Fun(x))
library(rcompanion)
# chi sq distrn
x <- rchisq(100,3)
plot(x)
# tukey fun
T_Tuk_Fun <- function(df) {
T_tuk = transformTukey(df,
plotit=F,quiet = T,returnLambda = T)
df^T_tuk}
plot(T_Tuk_Fun(x))
plot(x)
plot(T_Tuk_Fun(x))
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
}
plot(modelr::heights)
plot(modelr::heights$income)
tukey_ND_trans_Fun(modelr::heights$income)
plot(Orange)
plot(Orange$age)
plot(Orange$circumference)
tukey_ND_trans_Fun(Orange$circumference)
tuk_Trans_data
tukey_ND_trans_Fun(Orange$circumference)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
}
tukey_ND_trans_Fun(Orange$circumference)
tuk_Trans_data
data<- tukey_ND_trans_Fun(Orange$circumference)
data
plot(data)
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
T_tuk
}
data<- tukey_ND_trans_Fun(Orange$circumference)
data
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
}
plot(data)
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
}
data<- tukey_ND_trans_Fun(Orange$circumference)
plot(data)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
if(tuk_Trans_data == 1) {"warning lambda == 1"}
}
data<- tukey_ND_trans_Fun(Orange$circumference)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
if(tuk_Trans_data == 1) {"warning lambda == 1"}
else
}
data<- tukey_ND_trans_Fun(Orange$circumference)
data<- tukey_ND_trans_Fun(1:10)
plot(data)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
if(tuk_Trans_data == 1) {"warning lambda == 1"}
else {}
}
Orange
Orange %>%
filter(Tree == 1)
Orange %>%
filter(Tree == "1")
library(tidyverse)
Orange %>%
filter(Tree == "1")
Orange %>%
filter(Tree == "1") -> data
tukey_ND_trans_Fun(data$circumference)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
if(tuk_Trans_data == 1) {"warning lambda == 1"}
else {tuk_Trans_data}
}
tukey_ND_trans_Fun(data$circumference)
plot(tukey_ND_trans_Fun(data$circumference)
)
##-- trabsfrom var to ND using tukey power trasnform, notwell suited to big data
tukey_ND_trans_Fun <- function(df, plot_TRUE = FALSE) {
##-- tukey transform
library(rcompanion)
T_tuk = transformTukey(df,
plotit=plot_TRUE,quiet = T,returnLambda = T)
##== asigneed trans data to obj
tuk_Trans_data <- df^T_tuk
tuk_Trans_data
if(T_tuk == 1) {"warning lambda == 1"}
else {tuk_Trans_data}
}
library(vcd)## loading vcd package
?goodfit
dummy <- rnbinom(200, size = 1.5, prob = 0.8)
gf <- goodfit(dummy, type = "nbinomial", method = "MinChisq")
summary(gf)
plot(gf)
summary(gf)
gf
load{"~/Desktop/R Coding Catelog/AFL App Dev/AFL Datasets/fryziggafl.csv"}
load("~/Desktop/R Coding Catelog/AFL App Dev/AFL Datasets/fryziggafl.csv")
data <- read.csv("~/Desktop/R Coding Catelog/AFL App Dev/AFL Datasets/fryziggafl.csv")
library(tidyverse)
data %>%
filter(season == 2020)
data
data %>%
tail(1000)
data %>%
tail(1000) -> data
plot(data$goal_assists)
gf <- goodfit(data$goal_assists, type = "poisson", method = "MinChisq")
summary(gf)
plot(gf)
summary(gf)
gf <- goodfit(as.integer(data$goal_assists), type = "poisson", method = "MinChisq")
summary(gf)
plot(gf)
gf <- goodfit(as.integer(data$goals), type = "poisson", method = "MinChisq")
summary(gf)
plot(gf)
gf <- goodfit(as.integer(data$goals), type = "nbinomial", method = "MinChisq")
summary(gf)
plot(gf)
?goodfit
